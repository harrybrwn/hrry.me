version: "3.8"

# TODO
# - [ ] https://github.com/AppFlowy-IO/appflowy
# - [ ] https://www.appflowy.io/
# - [ ] https://github.com/toeverything/AFFiNE
# - [ ] https://cinwell.com/notea/
# - [ ] [github alternative](https://gitea.io/en-us/)
# - [ ] [manage github notifications](https://octobox.io/)
# - [ ] https://github.com/zadam/trilium
# - [ ] https://github.com/cloudron-io/meemo
# - [x] https://www.getoutline.com/
# - [x] https://blog.gurucomputing.com.au/doing-more-with-docker/deploying-outline-wiki/
# - [ ] Logseq
#   - https://github.com/bmpi-dev/logseq.xyz
#   - https://github.com/logseq/logseq/issues/12
#   - https://docs.logseq.com/#/page/Contents

services:
  db:
    image: ${REGISTRY}/harrybrwn/postgres:${VERSION:-latest}
    build:
      context: config/docker/postgres
      dockerfile: Dockerfile
      args:
        # - BASE_IMAGE_VERSION=14.2-alpine3.15
        - BASE_IMAGE_VERSION=13.6-alpine
    environment:
      # <username>:<password>
      POSTGRES_USERS: |-
        grafana:testbed02
        db-backups:testbed03
        hydra:testbed04
        outline:testbed05
      # <database>:<owner>
      POSTGRES_DATABASES: |-
        harrybrwn_api:harrybrwn
        harrybrwn_hooks:harrybrwn
        grafana:grafana
        hydra:hydra
        outline:outline
    networks:
      backend:
        aliases:
          - db.default.svc.cluster.local
    ports:
      - "5432:5432"
    volumes:
      - database:/var/lib/postgresql/data/
    env_file:
      - config/env/db.env
    healthcheck:
      test: ["CMD-SHELL" , "pg_isready --username harrybrwn -d harrybrwn"]
      interval: 10s

  redis:
    image: ${REGISTRY}/harrybrwn/redis:${VERSION:-latest}
    build:
      context: config/redis
      dockerfile: Dockerfile
      args:
        - REDIS_VERSION=6.2.6-alpine
    networks:
      backend:
        aliases:
          - redis.redis
          - redis.default.svc.cluster.local
    ports:
      - "${REDIS_PORT:-6379}:6379"
    env_file:
      - config/env/redis.env
    volumes:
      # Only use this if the cache stays on one machine
      - cache-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "ping"]
      interval: 1m

  nginx:
    image: ${REGISTRY}/harrybrwn/nginx:${VERSION:-latest}
    build:
      context: .
      dockerfile: Dockerfile
      target: nginx
      args:
        - REGISTRY_UI_ROOT=/var/www/registry.hrry.dev
        - NGINX_VERSION=1.20.2-alpine
    volumes:
      # harrybrwn.com
      - ./config/pki/certs/harrybrwn.com.crt:/etc/harrybrwn/certs/harrybrwn.com.crt:ro
      - ./config/pki/certs/harrybrwn.com.key:/etc/harrybrwn/certs/harrybrwn.com.key:ro
      # hrry.me
      - ./config/pki/certs/hrry.me.crt:/etc/harrybrwn/certs/hrry.me.crt:ro
      - ./config/pki/certs/hrry.me.key:/etc/harrybrwn/certs/hrry.me.key:ro
      # hrry.dev
      - ./config/pki/certs/hrry.dev.crt:/etc/harrybrwn/certs/hrry.dev.crt:ro
      - ./config/pki/certs/hrry.dev.key:/etc/harrybrwn/certs/hrry.dev.key:ro
    networks:
      backend:
        aliases:
          # Custom container hostname for other containers, mainly for testing.
          - harrybrwn.local
    ports:
      - target: 80
        published: 80
        mode: host
      - target: 443
        published: 443
        mode: host
    environment:
      - REGISTRY_TITLE=Harry's Docker Registry
      - REGISTRY_URL=https://registry.hrry.local
      - CATALOG_ELEMENTS_LIMIT=15
    healthcheck:
      test: ["CMD", "curl", "-fI", "localhost/health/ready"]
      interval: 2m
      timeout: 10s
      retries: 5

  api:
    image: ${REGISTRY}/harrybrwn/api:${VERSION:-latest}
    build:
      context: .
      dockerfile: Dockerfile
      target: api
      labels:
        com.harrybrwn.api.description: "api for harrybrwn.com"
        com.harrybrwn.api.commit: ${GIT_COMMIT:-dev}
        com.harrybrwn.api.branch: ${GIT_BRANCH:-dev}
        com.harrybrwn.api.source_hash: ${SOURCE_HASH:-0000}
    command: --port 8081
    env_file:
      - config/env/api.env
      - config/env/db.env
      - config/env/redis.env
    environment:
      - ENV=dev
      - LOG_OUTPUT=stdout
      - LOG_FORMAT=json
      - REDIS_HOST=redis
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=harrybrwn_api
      - HYDRA_ADMIN_URL=http://hydra:4445
    ports:
      - "8081:8081"
    networks:
      backend:
        aliases:
          - api.default.svc.cluster.local
    depends_on:
      - db
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "localhost:8081/api/health/ready"]
      timeout: 10s
      interval: 1m
      retries: 10
      start_period: 2m

  hooks:
    image: ${REGISTRY}/harrybrwn/hooks:${VERSION:-latest}
    build:
      context: .
      dockerfile: Dockerfile
      target: hooks
    command: --port 8889
    networks:
      backend:
        aliases:
          - hooks.default.svc.cluster.local
    env_file:
      - config/env/db.env
      - config/env/github.env
      - config/env/hooks.env
    environment:
      - POSTGRES_DB=harrybrwn_hooks
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
    healthcheck:
      test: ["CMD", "curl", "-fI", "localhost:8889/health/ready"]
      timeout: 10s
      interval: 1m
      retries: 10
      start_period: 2m

  backups:
    image: ${REGISTRY}/harrybrwn/backups:${VERSION:-latest}
    build:
      target: backups
      context: .
      dockerfile: Dockerfile
    command: --port 8082
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - S3_ENDPOINT=s3:9000
      - BACKUPS_BUCKET=db-backups
    env_file:
      - config/env/db-backup.env
      - config/env/db.env
    networks:
      backend:
        aliases:
          - backups.default.svc.cluster.local
    healthcheck:
      test: ["CMD", "curl", "-fI", "localhost:8082/health/ready"]
      timeout: 10s
      interval: 1m
      retries: 10
      start_period: 2m

  geoip:
    image: ${REGISTRY}/harrybrwn/geoip:${VERSION:-latest}
    build:
      target: geoip
      context: .
    command:
      - "--port=8084"
      - "--file=file:///opt/geoip/GeoLite2-City.mmdb"
      - "--file=file:///opt/geoip/GeoLite2-ASN.mmdb"
    networks:
      backend:
        aliases:
          - geoip.default.svc.cluster.local
    healthcheck:
      test: ["CMD", "curl", "-fI", "localhost:8084/health/ready"]
      timeout: 10s
      interval: 1m

  legacy-site:
    image: ${REGISTRY}/harrybrwn/legacy-site:${VERSION:-latest}
    build:
      target: legacy-site
      context: .
    command: --port 8083
    networks:
      backend:
        aliases:
          - legacy-site.default.svc.cluster.local
    healthcheck:
      test: ["CMD", "curl", "-fI", "localhost:8083/health/ready"]
      timeout: 10s
      interval: 1m

  vanity-imports:
    image: ${REGISTRY}/harrybrwn/vanity-imports:${VERSION:-latest}
    build:
      target: vanity-imports
      context: .
    command: --port 8085
    networks:
      backend:
        aliases:
          - vanity-imports.default.svc.cluster.local
    healthcheck:
      test: ["CMD", "curl", "-fI", "localhost:8085/health/ready"]
      timeout: 10s
      interval: 1m

  registry:
    image: registry:2
    command: /etc/docker/registry/config.yml
    environment:
      - REGISTRY_LOG_LEVEL=debug
      - REGISTRY_AUTH=htpasswd
      - REGISTRY_AUTH_HTPASSWD_PATH=/run/secrets/registry-htpasswd-file
      - REGISTRY_AUTH_HTPASSWD_REALM=registry.hrry.dev
    env_file:
      - config/env/redis.env
      - config/env/registry.env
      - config/env/minio.env
    secrets:
      - registry-htpasswd-file
    configs:
      - source: registry.yml
        target: /etc/docker/registry/config.yml
    networks:
      backend:
        aliases:
          - registry.default.svc.cluster.local
    depends_on:
      - s3
      - redis
    healthcheck:
      test: ["CMD", "wget", "-qO-", "localhost:5000/"]
      timeout: 10s
      interval: 1m

  # TODO look at distributed config <https://docs.min.io/docs/deploy-minio-on-docker-compose.html>
  s3:
    image: ${REGISTRY}/harrybrwn/s3:${VERSION:-latest}
    build:
      context: ./config
      dockerfile: docker/minio/Dockerfile
      args:
        - MINIO_VERSION=RELEASE.2022-05-23T18-45-11Z.fips
        - MC_VERSION=RELEASE.2022-05-09T04-08-26Z.fips
    command: ["server", "/data", "--console-address", ":9001"]
    ports:
      - 9000:9000 # api
      - 9001:9001 # web ui
    volumes:
      - s3:/data
    env_file:
      - config/env/minio.env
    environment:
      - HB_MC_ALIAS_NAME=hrry
      - HB_MC_ALIAS_URL=http://s3:9000
      - MINIO_SERVER_URL=http://s3:9000
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_PROMETHEUS_URL=http://prometheus:9090
      - MINIO_PROMETHEUS_JOB_ID=minio-cluster
      - MINIO_BROWSER_REDIRECT_URL=http://s3-console.hrry.local
      - MINIO_LOGGER_WEBHOOK_ENABLE_PRIMARY=on
      - MINIO_LOGGER_WEBHOOK_ENDPOINT_PRIMARY=http://hooks:8889/hooks/minio/logs
      - MINIO_AUDIT_WEBHOOK_ENABLE_PRIMARY=on
      - MINIO_AUDIT_WEBHOOK_ENDPOINT_PRIMARY=http://hooks:8889/hooks/minio/audit
    networks:
      backend:
        aliases:
          - s3.default.svc.cluster.local
    healthcheck:
      test: ["CMD", "curl", "-fI", "http://localhost:9000/minio/health/cluster"]
      interval: 30s
      timeout: 15s
      retries: 5

  hydra:
    image: oryd/hydra:v1.11.8
    entrypoint: ["sh", "-c"]
    command:
      - |
        sh /usr/local/bin/wait.sh tcp://db:5432 -- hydra migrate sql -e -y
        exec hydra serve all --config /hydra.yml
    env_file:
      - config/env/hydra.env
    networks:
      backend:
        aliases:
          - hydra.default.svc.cluster.local
    configs:
      - source: hydra.yml
        target: /hydra.yml
      - source: wait.sh
        target: /usr/local/bin/wait.sh
    environment:
      - LOG_FORMAT=json
      - HYDRA_URL=http://hydra:4444
      - HYDRA_ADMIN_URL=http://hydra:4445
      - OAUTH2_EXPOSE_INTERNAL_ERRORS=true
    depends_on:
      - db

  filestash:
    image: machines/filestash:d1a2c7a
    ports:
      - "8334"
    networks:
      backend:
        aliases:
          - filestash.default.svc.cluster.local
    volumes:
      - filestash:/app/data/state
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "localhost:8334/healthz"]
    #   interval: 1m30s
    #   timeout: 30s
    #   retries: 5
    #   start_period: 30s

volumes:
  database:
  cache-data:
  s3:
  filestash:

networks:
  backend:
  hrry.me:
    external: true

secrets:
  registry-htpasswd-file:
    file: ./config/registry/htpasswd
  nginx-prometheus-passwd:
    file: ./config/nginx/metrics.passwd

configs:
  registry.yml:
    file: ./config/registry/config.yml
  hydra.yml:
    file: ./config/hydra/hydra.yml
  # This is pretty weird... not best practice
  wait.sh:
    file: ./scripts/wait.sh
