version: "3.8"

services:
  db:
    image: postgres:13.6-alpine
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-testdb1}
      POSTGRES_USER: ${POSTGRES_USER:-web}
      POSTGRES_DB: ${POSTGRES_DB:-harrybrwn}
    ports:
      - "9432:5432"
    volumes:
      - database:/var/lib/postgresql/data/
    networks:
      - backend

  redis:
    image: redis:6.2.6-alpine
    ports:
      - ${REDIS_PORT:-6379}:${REDIS_PORT:-6379}
    command:
      - redis-server
      - --port
      - ${REDIS_PORT:-6379}
      - --requirepass
      - ${REDIS_PASSWORD:-testcache1}
    volumes:
      - cache-data:/data
    networks:
      - backend

  api:
    image: harrybrwn-api:latest
    hostname: api
    domainname: api
    build:
      context: .
      dockerfile: Dockerfile
      target: api
    command: -port 8081
    networks:
      - backend
    ports:
      - 8080:8081
    environment:
      # Redis
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD
      # Database
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_PASSWORD
      - POSTGRES_USER
      - POSTGRES_DB
      # Misc
      - ENV
      - JWT_SEED
      - SENDGRID_API_KEY
    volumes:
      - ./config/pki/certs/harrybrwn.com/server.crt:/etc/letsencrypt/live/harrybrwn.com/fullchain.pem:ro
      - ./config/pki/certs/harrybrwn.com/server.key:/etc/letsencrypt/live/harrybrwn.com/privkey.pem:ro

  nginx:
    image: nginx:1.20.2-alpine
    volumes:
      - ./build:/var/www/harrybrwn.com:ro
      - ./config/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./config/nginx/snippets:/etc/nginx/snippets:ro
      - ./config/pki/certs/harrybrwn.com/server.crt:/etc/letsencrypt/live/harrybrwn.com/fullchain.pem:ro
      - ./config/pki/certs/harrybrwn.com/server.key:/etc/letsencrypt/live/harrybrwn.com/privkey.pem:ro
    networks:
      backend:
        aliases:
          - nginx
          # Custom container hostname for other containers, mainly for testing.
          - harrybrwn.local
    ports:
      - "80:80"
      - "443:443"

volumes:
  database:
  cache-data:

networks:
  backend:
