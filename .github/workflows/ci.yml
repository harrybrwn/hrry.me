on: [push, pull_request]
name: ci

jobs:
  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ~1.17.5
      - name: Get Go Version
        id: go-version
        run: echo "::set-output name=version-used::$(go env GOVERSION)"

      - name: Cache Build Tools
        uses: actions/cache@v2
        id: go-cache
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
            ~/go/bin
          key: ${{ runner.os }}_${{ runner.arch }}-${{ steps.go-version.outputs.version-used }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}_${{ runner.arch }}-${{ steps.go-version.outputs.version-used }}-
      - name: Install Go MockGen
        if: steps.go-cache.outputs.cache-hit != 'true'
        run: go install github.com/golang/mock/mockgen@latest
      - run: go generate ./...
      - run: go vet -tags ci ./...
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2

  test:
    strategy:
      matrix:
        go-version:
          # - 1.16.x
          - ~1.17.5
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    # Caching yarn packages
    - name: Get yarn cache directory
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"
    - name: Cache yarn dependencies
      uses: actions/cache@v2
      id: yarn-cache
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go-version }}
    - name: Get Go Version
      id: go-version
      run: echo "::set-output name=version-used::$(go env GOVERSION)"

    # Cache go modules and builds
    - name: Cache Go modules and builds
      uses: actions/cache@v2
      id: go-cache
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
          ~/go/bin
        key: ${{ runner.os }}_${{ runner.arch }}-${{ steps.go-version.outputs.version-used }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}_${{ runner.arch }}-${{ steps.go-version.outputs.version-used }}-

    - uses: actions/setup-node@v2
      with:
        node-version-file: '.nvmrc'
        cache: 'yarn'

    - name: Install Go dependencies
      if: steps.go-cache.outputs.cache-hit != 'true'
      run: |
        go install github.com/golang/mock/mockgen@latest
        go mod download

    - name: Install frontend dependencies
      #if: steps.yarn-cache.outputs.cache-hit != 'true'
      run: yarn install

    - name: Build Frontend
      run: yarn build:ci
    - name: Build Backend
      run: |
        go generate ./...
        go build -trimpath -ldflags "-w -s"

    - name: Test Frontend
      run: yarn test:ci
    - name: Test Backend
      run: go test -tags ci -v -cover ./...

  migrate:
    name: Database Migrations
    needs: [lint, test]
    runs-on: ubuntu-latest
    env:
      GO_VERSION: 1.17.5
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ~${{ env.GO_VERSION }}
      - name: Get Go Version
        id: go-version
        run: echo "::set-output name=version-used::$(go env GOVERSION)"

      - name: Cache Migration tool
        uses: actions/cache@v2
        id: migrate-tool
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
            ~/go/bin
          key: ${{ runner.os }}_${{ runner.arch }}-${{ steps.go-version.outputs.version-used }}-migrate-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}_${{ runner.arch }}-${{ steps.go-version.outputs.version-used }}-migrate-

      - name: Install Migration Tool
        if: steps.migrate-tool.outputs.cache-hit != 'true'
        run: go install -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@latest

      - name: Staging DB Migration
        run: migrate -verbose -dir ./db/migrations -database ${{ secrets.STAGING_DATABASE_URL }} up
        if: github.ref == 'refs/heads/staging'
      - name: Production DB Migration
        run: migrate -verbose -dir ./db/mirations -database ${{ secrets.PROD_DATABASE_URL }} up
        if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
      - run: migrate -version
        if: github.ref == 'refs/heads/dev'
