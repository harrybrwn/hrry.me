on: [push]
name: ci

env:
  GO_VERSION: '1.20'
  COMPOSE_DOCKER_CLI_BUILD: '1'
  DOCKER_BUILDKIT: '1'

jobs:
  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ~${{ env.GO_VERSION }}
      - name: Install Build Tools
        uses: ./.github/actions/install-tools

      - run: go vet -tags ci ./...
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.52.2
          args: --config ./config/golangci.yml
      - name: Lint rust
        run: cargo clippy

  build:
    name: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      # Install node
      - uses: actions/setup-node@v3
        with:
          node-version-file: 'frontend/legacy/.nvmrc'
          cache: 'yarn'
      - uses: actions/setup-go@v5
        with:
          go-version: ~${{ env.GO_VERSION }}
      - name: Install Build Tools
        uses: ./.github/actions/install-tools

      - name: Install frontend dependencies
        run: yarn install
      - name: Build Frontend
        run: yarn workspaces run build:ci
      - name: Build Backend
        run: |
          go generate ./...
          go build -x -trimpath -ldflags "-w -s" -o /tmp/hrry-api ./cmd/api

  test:
    strategy:
      matrix:
        go-version:
          # - 1.16.x
          - ~1.20
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Caching yarn packages
    - name: Get yarn cache directory
      id: yarn-cache-dir-path
      run: echo "dir=$(yarn cache dir)" >> "$GITHUB_OUTPUT"
    - name: Cache yarn dependencies
      uses: actions/cache@v4
      id: yarn-cache
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Install Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - id: go-tools
      uses: ./.github/actions/install-tools

    # Install node
    - uses: actions/setup-node@v3
      with:
        node-version-file: 'frontend/legacy/.nvmrc'
        cache: 'yarn'

    - name: Install Go dependencies
      if: steps.go-tools.outputs.cache-hit != 'true'
      run: |
        scripts/install-tools.sh mockgen mc
        go mod download

    - name: Install frontend dependencies
      #if: steps.yarn-cache.outputs.cache-hit != 'true'
      run: yarn install

    # - name: Test Frontend
    #   run: yarn workspaces run test:ci
    - name: Test Backend
      run: |
        go generate ./...
        go test -tags ci -v -cover ./...

  functional:
    name: Functional Tests
    runs-on: ubuntu-latest
    needs: [build]
    env:
      SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
      JWT_SEED: ${{ secrets.JWT_SEED }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Download GeoLite2
        uses: ./.github/actions/maxminddb
        with:
          dest: ./files/mmdb/latest
          s3-path: geoip/2023-04-27
          s3-access-key: ${{ secrets.S3_ACCESS_KEY }}
          s3-secret-key: ${{ secrets.S3_SECRET_KEY }}
      - name: Generate test certs
        run: scripts/certs.sh --no-install
      - name: Testing env files
        run: |
          echo "REGISTRY_USER=harrybrwn" > ./config/env/registry.env
          echo "REGISTRY_PASSWORD=testbed01" >> ./config/env/registry.env
          echo "REGISTRY_HTTP_SECRET=00000000000000000000000000000000" >> ./config/env/registry.env
          echo "SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY }}" > ./config/env/sendgrid.env
      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v3
      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v3
        id: buildx
        with:
          # `docker build` becomes an alias for `docker buildx build`
          install: true
      - name: Prep tools
        run: make scripts
      - name: Build functional test images
        run: bin/functional build --progress plain
      - name: Start services
        run: scripts/functional.sh setup
      - name: Run tests
        run: scripts/functional.sh test

  docker:
    name: Build Docker Images
    needs: [lint, build, test, functional]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v3
      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v3
        id: buildx
        with:
          # `docker build` becomes an alias for `docker buildx build`
          install: true

      - name: Download GeoLite2
        uses: ./.github/actions/maxminddb
        with:
          dest: ./files/mmdb/latest
          s3-path: geoip/2023-04-27
          s3-access-key: ${{ secrets.S3_ACCESS_KEY }}
          s3-secret-key: ${{ secrets.S3_SECRET_KEY }}

      - name: Build Images
        run: |
          GIT_TAG="$(git describe --tags --abbrev=0 2>/dev/null || printf "v0")"
          GIT_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
          GIT_COMMIT="$(git rev-parse HEAD)"
          SOURCE_HASH="$(./scripts/sourcehash.sh -e '*_test.go')"
          export GIT_COMMIT GIT_BRANCH GIT_TAG SOURCE_HASH
          docker compose \
            --file docker-compose.yml \
            --file config/docker-compose.logging.yml \
            --file config/docker-compose.tools.yml config 2>/dev/null \
            | docker buildx bake \
              --file - \
              --file config/docker/buildx.yml
          docker image ls

# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
