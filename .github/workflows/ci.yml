on: [push]
name: ci

env:
  GO_VERSION: '1.20'
  COMPOSE_DOCKER_CLI_BUILD: '1'
  DOCKER_BUILDKIT: '1'

jobs:
  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ~${{ env.GO_VERSION }}
      - name: Get Go Version
        id: go-version
        run: echo "::set-output name=version-used::$(go env GOVERSION)"

      - name: Cache Build Tools
        uses: actions/cache@v2
        id: go-cache
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
            ~/go/bin
          key: ${{ runner.os }}_${{ runner.arch }}-${{ steps.go-version.outputs.version-used }}-gomockgen-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}_${{ runner.arch }}-${{ steps.go-version.outputs.version-used }}-gomockgen-
      - name: Install Go MockGen
        if: steps.go-cache.outputs.cache-hit != 'true'
        run: go install github.com/golang/mock/mockgen@latest
      - run: go generate ./...
      - run: go vet -tags ci ./...
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.52.2
          args: --config ./config/golangci.yml

  build:
    name: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Install node
      - uses: actions/setup-node@v2
        with:
          node-version-file: 'frontend/legacy/.nvmrc'
          cache: 'yarn'
      - uses: actions/setup-go@v2
        with:
          go-version: ~${{ env.GO_VERSION }}

      - name: Get Go Version
        id: go-version
        run: echo "::set-output name=version-used::$(go env GOVERSION)"
      - name: Cache Builds
        uses: actions/cache@v2
        id: go-cache
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
            ~/go/bin
          key: ${{ runner.os }}_${{ runner.arch }}-${{ steps.go-version.outputs.version-used }}-build-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}_${{ runner.arch }}-${{ steps.go-version.outputs.version-used }}-build-
      - name: Install Go dependencies
        if: steps.go-cache.outputs.cache-hit != 'true'
        run: |
          go install github.com/golang/mock/mockgen@latest
          go mod download

      - name: Install frontend dependencies
        #if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn install
      - name: Build Frontend
        run: yarn workspaces run build:ci
      - name: Build Backend
        run: |
          go generate ./...
          go build -x -trimpath -ldflags "-w -s" -o /tmp/hrry-api ./cmd/api
      - name: Store frontend build
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: ./build
          retention-days: 1

  test:
    strategy:
      matrix:
        go-version:
          # - 1.16.x
          - ~1.20
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    # Caching yarn packages
    - name: Get yarn cache directory
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"
    - name: Cache yarn dependencies
      uses: actions/cache@v2
      id: yarn-cache
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go-version }}
    - name: Get Go Version
      id: go-version
      run: echo "::set-output name=version-used::$(go env GOVERSION)"

    - name: Cache Go modules and builds
      uses: actions/cache@v2
      id: go-cache
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
          ~/go/bin
        key: ${{ runner.os }}_${{ runner.arch }}-${{ steps.go-version.outputs.version-used }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}_${{ runner.arch }}-${{ steps.go-version.outputs.version-used }}-

    # Install node
    - uses: actions/setup-node@v2
      with:
        node-version-file: 'frontend/legacy/.nvmrc'
        cache: 'yarn'

    - name: Install Go dependencies
      if: steps.go-cache.outputs.cache-hit != 'true'
      run: |
        scripts/install-tools.sh mockgen mc
        go mod download

    - name: Install frontend dependencies
      #if: steps.yarn-cache.outputs.cache-hit != 'true'
      run: yarn install

    - name: Test Frontend
      run: yarn workspaces run test:ci
    - name: Test Backend
      run: |
        go generate ./...
        go test -tags ci -v -cover ./...

  functional:
    name: Functional Tests
    runs-on: ubuntu-latest
    needs: [build]
    env:
      SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
      JWT_SEED: ${{ secrets.JWT_SEED }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - uses: actions/setup-go@v2
        with:
          go-version: ~${{ env.GO_VERSION }}
      - name: Get Go Version
        id: go-version
        run: echo "::set-output name=version-used::$(go env GOVERSION)"
      - name: Cache Build Tools
        uses: actions/cache@v2
        id: go-cache
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
            ~/go/bin
          key: ${{ runner.os }}_${{ runner.arch }}-${{ steps.go-version.outputs.version-used }}-go_tools-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}_${{ runner.arch }}-${{ steps.go-version.outputs.version-used }}-go_tools-
      - name: Install Go Tools
        if: steps.go-cache.outputs.cache-hit != 'true'
        run: |
          scripts/install-tools.sh mc
          mc alias set s3-hrry-dev https://s3.hrry.dev ${{ secrets.S3_ACCESS_KEY }} ${{ secrets.S3_SECRET_KEY }} --api "s3v4"
      - name: Cache GeoLite2
        uses: actions/cache@v2
        id: geo-lite2-dl
        with:
          key: ${{ steps.go-version.outputs.version-used }}-geoip-dl-${{ hashFiles('files/mmdb/*') }}
          restore-keys: |
            ${{ steps.go-version.outputs.version-used }}-geoip-dl-
          path: |
            ./files/mmdb
      - name: Download GeoLite2
        if: steps.geo-lite2-dl.outputs.cache-hit != 'true'
        run: |
          mkdir -p ./files/mmdb
          mc cp s3-hrry-dev/geoip/GeoLite2_20220621/GeoLite2-ASN.mmdb ./files/mmdb/
          mc cp s3-hrry-dev/geoip/GeoLite2_20220621/GeoLite2-City.mmdb ./files/mmdb/
          mc cp s3-hrry-dev/geoip/GeoLite2_20220621/GeoLite2-Country.mmdb ./files/mmdb/

      - name: Generate test certs
        run: scripts/certs.sh --no-install
      - name: Testing env files
        run: |
          echo "REGISTRY_USER=harrybrwn" > ./config/env/registry.env
          echo "REGISTRY_PASSWORD=testbed01" >> ./config/env/registry.env
          echo "REGISTRY_HTTP_SECRET=00000000000000000000000000000000" >> ./config/env/registry.env
          echo "SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY }}" > ./config/env/sendgrid.env

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v1
        id: buildx
        with:
          # `docker build` becomes an alias for `docker buildx build`
          install: true
      - name: Cache docker image layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          # key: ${{ runner.os }}-buildx-${{ github.sha }}
          key: ${{ runner.os }}-buildx-always_cache
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build api image
        uses: docker/build-push-action@v2
        with:
          push: false # Don't push image to an image repository
          load: true  # Finish the build by exporting as a regular docker image
          # Must match the image name in docker-compose.yml
          tags: registry.digitalocean.com/webreef/harrybrwn/api:latest
          context: .
          file: ./Dockerfile
          target: api
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new
          platforms: linux/amd64
      - name: Build nginx server image
        uses: docker/build-push-action@v2
        with:
          load: true  # Finish the build by exporting as a regular docker image
          # Must match the image name in docker-compose.yml
          tags: harrybrwn/nginx:latest
          context: .
          target: nginx
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=local,src=/tmp/.buildx-cache-new
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new
      - name: Build testing image
        uses: docker/build-push-action@v2
        with:
          push: false # Don't push image to an image repository
          load: true  # Finish the build by exporting as a regular docker image
          # Must match the image name in docker-compose.yml
          tags: python-tests:latest,functional-tests:latest
          context: .
          file: ./Dockerfile
          target: python
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=local,src=/tmp/.buildx-cache-new
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

      - name: Move buildx cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Download Frontend build
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: ./build/
      - name: Start services
        run: scripts/functional.sh setup
      - name: Run tests
        run: scripts/functional.sh test

  docker:
    name: Build Docker Images
    needs: [lint, build, test, functional]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v1
        id: buildx
        with:
          # `docker build` becomes an alias for `docker buildx build`
          install: true
      - name: Install minio client
        run: |
          wget -O /usr/local/bin/mc https://dl.min.io/client/mc/release/linux-amd64/mc
          chmod +x /usr/local/bin/mc
          mc alias set s3-hrry-dev https://s3.hrry.dev ${{ secrets.S3_ACCESS_KEY }} ${{ secrets.S3_SECRET_KEY }} --api "s3v4"
      - name: Cache GeoLite2
        uses: actions/cache@v2
        id: geo-lite2-dl
        with:
          key: geoip-dl-${{ hashFiles('files/mmdb/*') }}
          restore-keys: |
            geoip-dl-
          path: |
            ./files/mmdb
      - name: Download GeoLite2
        if: steps.geo-lite2-dl.outputs.cache-hit != 'true'
        run: |
          mkdir -p ./files/mmdb
          mc cp s3-hrry-dev/geoip/GeoLite2_20220621/GeoLite2-ASN.mmdb ./files/mmdb/
          mc cp s3-hrry-dev/geoip/GeoLite2_20220621/GeoLite2-City.mmdb ./files/mmdb/
          mc cp s3-hrry-dev/geoip/GeoLite2_20220621/GeoLite2-Country.mmdb ./files/mmdb/
      - name: Build Images
        run: |
          GIT_TAG="$(git describe --tags --abbrev=0 2>/dev/null || printf "v0")"
          GIT_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
          GIT_COMMIT="$(git rev-parse HEAD)"
          SOURCE_HASH="$(./scripts/sourcehash.sh -e '*_test.go')"
          export GIT_COMMIT GIT_BRANCH GIT_TAG SOURCE_HASH
          docker compose \
            --file docker-compose.yml \
            --file config/docker-compose.logging.yml \
            --file config/docker-compose.tools.yml config 2>/dev/null \
            | docker buildx bake \
              --file - \
              --file config/docker/buildx.yml
          docker image ls
