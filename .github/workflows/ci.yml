on: [push, pull_request]
name: ci

jobs:
  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: ~1.17
      - name: Install Go MockGen
        run: go install github.com/golang/mock/mockgen@latest
      - name: Checkout Code
        uses: actions/checkout@v2
      - run: go generate ./...
      - run: go vet ./cmd/... ./app/... ./pkg/...

  test:
    strategy:
      matrix:
        go-version:
          # - 1.16.x
          - 1.17.5
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go-version }}

    - name: Checkout code
      uses: actions/checkout@v2

    - uses: actions/setup-node@v2
      with:
        node-version-file: '.nvmrc'
        cache: 'yarn'

    # Caching yarn packages
    - name: Get yarn cache directory
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"
    - name: Cache yarn dependencies
      uses: actions/cache@v2
      id: yarn-cache
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    # Cache go modules and builds
    - name: Cache Go modules and builds
      uses: actions/cache@v2
      id: go-cache
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
          ~/go/bin
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Install Go MockGen
      if: steps.go-cache.outputs.cache-hit != 'true'
      run: go install github.com/golang/mock/mockgen@latest
    - name: Install go dependencies
      if: steps.go-cache.outputs.cache-hit != 'true'
      run: go mod download

    - name: Frontend dependencies
      run: yarn install
    - run: yarn build
    - run: go generate ./...
    - run: go build -trimpath -ldflags "-w -s"

    - name: Test Frontend
      run: yarn test:ci
    - name: Test Backend
      run: go test -v -cover ./...

  migrate:
    name: Database Migrations
    needs: [lint, test]
    runes-one: ubuntu-latest
    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: ~1.17
      - run: go install -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@latest
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - run: migrate -h
