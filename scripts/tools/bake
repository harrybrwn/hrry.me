#!/usr/bin/bash

set -euo pipefail

if [ -f .env ]; then
  source .env
fi

GIT_TAG="$(git describe --tags --abbrev=0 2>/dev/null || printf "v0.0.0")"
GIT_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
GIT_COMMIT="$(git rev-parse HEAD)"
SOURCE_HASH="$(./scripts/sourcehash.sh -e '*_test.go')"
REG="${REGISTRY:-10.0.0.11:5000}"
export GIT_GIT GIT_BRANCH GIT_COMMIT SOURCE_HASH

get_platform() {
  _kernel="$(uname -s | sed 's/^L/l/')"
  _arch="$(uname -m)"
  case "$_kernel" in
    Linux|linux) _kernel="linux";;
    *)
      echo "$_kernel not supported"
      exit 1
      ;;
  esac
  case "$_arch" in
    x86_64) _arch="amd64";;
    arm*)
      _arch="$(echo "$_arch" | sed -E 's/.*?v([0-9]+).*$/arm\/v\1/')"
      ;;
    *) return;;
  esac
  echo -n "${_kernel}/${_arch}"
}

usage() {
  echo "bake [flags...] [-- [buildx-args...]]"
  echo
  echo "Flags"
  echo "  -h --help              print help message"
  echo "  -l --local             load images locally"
  echo "     --registry <uri>    change the registry (default \"$REG\")"
  echo "     --platform <s>      target a spesific platform"
  echo "     --prune             delete all the images and their tags (default: false)"
  echo "     --list              list the available targets"
  echo "  -v --verbose           run verbose logging"
}

args=()
is_local=false
prune=false
verbose=false
platform=""
push=false
list=false
while [ $# -gt 0 ]; do
  case $1 in
  	-h|--help)
      usage
      exit 0
      ;;
    -l|--local)
      is_local=true
      GIT_BRANCH=""
      GIT_COMMIT=""
      shift 1
      ;;
    --push)
      push=true
      args+=("--push")
      shift 1
      ;;
    --registry)
      REG="$2"
      shift 2
      ;;
    --platform)
      platform="${2}"
      shift 2
      ;;
    --prune)
      prune=true
      shift 1
      ;;
    --list|--ls)
      list=true
      shift 1
      ;;
    --verbose|-v)
      verbose=true
      shift 1
      ;;
    --)
    	shift
      args+=("$@")
    	break
      ;;
    *)
      args+=("$1")
      shift 1
      ;;
  esac
done

if ${is_local}; then
  if ${push}; then
    echo "Error: should not use --push and --local together"
    exit 1
  fi
  args+=("--set" "*.platform=local")
  GIT_TAG=dev
  GIT_BRANCH=dev
  GIT_COMMIT=dev
  export GIT_GIT GIT_BRANCH GIT_COMMIT SOURCE_HASH
  export _IS_LOCAL=true
elif ${prune}; then
  docker image ls | grep "${REG}" #| awk '{print $3}'
  docker image rm -f "$(docker image ls | grep "${REG}" | awk '{print $3}')"
  exit 0
elif ${list}; then
  docker buildx bake -f config/docker/docker-bake.hcl "${args[@]}" --print | jq -r '.target | keys[]'
  exit 0
fi

if [ -n "${platform}" ]; then
  args+=("--set" "*.platform=${platform}")
fi

if ${verbose}; then
  echo "GIT_TAG=$GIT_TAG"
  echo "GIT_BRANCH=$GIT_BRANCH"
  echo "GIT_COMMIT=$GIT_COMMIT"
  echo "SOURCE_HASH=$SOURCE_HASH"
fi

REGISTRY="$REG" docker buildx bake -f config/docker/docker-bake.hcl "${args[@]}"
