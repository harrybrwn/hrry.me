- name: Registry | Certificates | Create Keys and Issue Certificates
  block:
    - name: Registry | Certificates | Check Variables
      ansible.builtin.fail:
        msg: "'registry_cert_dir', 'common_name', and 'subject_alt_name' are required variables"
      when: >-
        (registry_cert_dir is not defined and
        common_name is not defined and
        subject_alt_name is not defined)

    - name: Registry | Certificates | Create Cert Dir
      ansible.builtin.file:
        state: directory
        path: "{{ registry_cert_dir }}"
        mode: "0755"

    - name: Registry | Certificates | Check whether CA cert key exists
      ansible.builtin.stat:
        path: "{{ registry_cert_dir }}/registry-ca.key"
      register: ca_key_exists
    - name: Registry | Certificates | Create CA key
      when: not ca_key_exists.stat.exists
      community.crypto.openssl_privatekey:
        path: "{{ registry_cert_dir }}/registry-ca.key"
      register: create_ca_key
      notify:
        - create ca cert # create a ca certificate when the key changes

    - name: Registry | Certificates | Create CA CSR
      community.crypto.openssl_csr_pipe:
        privatekey_path: "{{ registry_cert_dir }}/registry-ca.key"
        common_name: docker registry ca
        organization_name: Harry Brown
        use_common_name_for_san: false
        basic_constraints:
          - 'CA:TRUE'
        basic_constraints_critical: true
        key_usage:
          - keyCertSign
          - cRLSign
        key_usage_critical: true
      register: ca_csr
    # - name: Registry | Certificates | Create CA Cert
    #   when: create_ca_key.changed
    #   community.crypto.x509_certificate:
    #     path: "{{ registry_cert_dir }}/registry-ca.crt"
    #     privatekey_path: "{{ registry_cert_dir }}/registry-ca.key"
    #     csr_content: "{{ ca_csr.csr }}"
    #     provider: selfsigned

    - name: Registry | Certificates | Check if Server Certificate exists
      ansible.builtin.stat:
        path: "{{ registry_cert_dir }}/registry-server.crt"
      register: reg_certificate_exists
    - name: Registry | Certificates | Read existing certificate if exists
      ansible.builtin.slurp:
        src: "{{ registry_cert_dir }}/registry-server.crt"
      when: reg_certificate_exists.stat.exists
      register: certificate
    - name: Registry | Certificates | Get Cert Data
      community.crypto.x509_certificate_info:
        content: "{{ (certificate.content | b64decode) if reg_certificate_exists.stat.exists else omit }}"
      register: existing_srv_cert_info
      when: reg_certificate_exists.stat.exists
    - name: Registry | Certificates | Check if Server Certificate exists
      ansible.builtin.stat: { path: "{{ registry_cert_dir }}/registry-server.crt" }
      register: reg_certificate_exists

    - name: Registry | Certificates | Check if Server Key exists
      ansible.builtin.stat:
        path: "{{ registry_cert_dir }}/registry-server.key"
      register: server_key_exists
    - name: Registry | Certificates | Delete Key if cert expired
      ansible.builtin.file:
        state: absent
        path: "{{ registry_cert_dir }}/registry-server.key"
      when: server_key_exists.stat.exists and existing_srv_cert_info.expired
    - name: Registry | Certificates | Create Server key
      community.crypto.openssl_privatekey:
        path: "{{ registry_cert_dir }}/registry-server.key"
      when: >
        (not server_key_exists.stat.exists or
         existing_srv_cert_info.expired or
         create_ca_key.changed)
      register: create_server_key
    - name: Registry | Certificates | Create Server CSR
      register: server_csr
      community.crypto.openssl_csr_pipe:
        privatekey_path: "{{ registry_cert_dir }}/registry-server.key"
        common_name: "{{ common_name }}"
        subject_alt_name: "{{ subject_alt_name }}"
        key_usage: [digitalSignature, nonRepudiation, keyEncipherment]
        basic_constraints: ['CA:FALSE']

    - name: Registry | Certificates | Sign Server Certificate
      community.crypto.x509_certificate_pipe:
        # Add the slurped content if the certificate file exists and its not expired
        content: "{{ (certificate.content | b64decode) if reg_certificate_exists.stat.exists and not existing_srv_cert_info.expired else omit }}"
        csr_content: "{{ server_csr.csr }}"
        privatekey_path: "{{ registry_cert_dir }}/registry-server.key"
        provider: ownca
        ownca_path: "{{ registry_cert_dir }}/registry-ca.crt"
        ownca_privatekey_path: "{{ registry_cert_dir }}/registry-ca.key"
        ownca_create_subject_key_identifier: always_create
        ownca_not_after: +365d
        ownca_not_before: "+0s"
      register: certificate

    - name: Registry | Certificates | Write New Server Certificate file
      # Write the newly created file only if the file doesn't already exist the
      # cert is expired or it has changed.
      when: >
        (not reg_certificate_exists.stat.exists or
         existing_srv_cert_info.expired or
         certificate.changed or
         create_server_key.changed or
         create_ca_key.changed)
      ansible.builtin.copy:
        dest: "{{ registry_cert_dir }}/registry-server.crt"
        content: "{{ certificate.certificate }}"
        mode: preserve

    - name: Registry | Certificates | Set Variables for k3s/registry role
      when: register_k3s_vars is defined and register_k3s_vars
      block:
        - name: Registry | Certificates | Read CA certificate
          ansible.builtin.slurp:
            src: "{{ registry_cert_dir }}/registry-ca.crt"
          register: registry_ca_contents_slurp
        - name: Registry | Certificates | Read Cert Key
          ansible.builtin.slurp:
            src: "{{ registry_cert_dir }}/registry-server.key"
          register: registry_key_contents_slurp
        - name: Registry | Certificates | Set k3s registry variables
          ansible.builtin.set_fact:
            registry_ca_contents: "{{ registry_ca_contents_slurp.content | b64decode }}"
            registry_key_contents: "{{ registry_key_contents_slurp.content | b64decode }}"
            registry_cert_contents: "{{ certificate.certificate }}"

    - name: Registry | Certificates | Cleanup Local variables
      ansible.builtin.set_fact:
        # unset internal variables
        certificate: null
        reg_certificate_exists: null
        ca_csr: null
        server_csr: null
        ca_key_exists: null
  # Run the whole block on localhost
  # delegate_to: localhost
  # run_once: true
