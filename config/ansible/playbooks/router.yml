- name: Configure Router
  become: false
  gather_facts: false
  hosts: router
  vars_files:
    - ../vars/router-password.yml
  vars:
    router_ip: 10.0.0.1
  module_defaults:
    community.routeros.api: &ros_auth
      hostname: "{{ ansible_host }}"
      username: "{{ router_username }}"
      password: "{{ router_password }}"
    community.routeros.api_modify: *ros_auth
    community.routeros.api_find_and_modify: *ros_auth
    community.routeros.api_facts: *ros_auth
  tasks:
    - name: Setup Static DNS records
      community.routeros.api_modify:
        # ensure_order: true
        # handle_absent_entries: remove
        handle_entries_content: remove_as_much_as_possible
        path: ip dns static
        data:
          - name: router.lan
            address: 10.0.0.1
          - name: rpi1.lan
            address: 10.0.0.21
          - name: rpi2.lan
            address: 10.0.0.22
          - name: rpi3.lan
            address: 10.0.0.23
    # - command: ssh-keygen -f /home/ansible/.ssh/known_hosts -R router.lan
    # - command: cat /home/ansible/.ssh/known_hosts
    #   register: a
    # - debug: var=a
    #   delegate_to: localhost
    # - name: Upload configuration
    #   ansible.netcommon.net_put:
    #     src: files/cloudflare-address-list.rsc
    #     # dest: disk1/cloudflare-address-list.rsc
    #     dest: disk1/
    #     protocol: scp
    # - copy:
    #     src: files/cloudflare-address-list.rsc
    #     # dest: cloudflare-address-list.rsc
    #     # dest: /disk1/cloudflare-address-list.rsc
    #     dest: cloudflare-address-list.rsc
    # - command: "scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null files/cloudflare-address-list.rsc {{ ansible_ssh_user }}@{{ ansible_host }}:disk1/cloudflare-address-list.rsc"
    # - command: "scp -o StrictHostKeyChecking=no files/cloudflare-address-list.rsc {{ ansible_ssh_user }}@{{ ansible_host }}:disk1/cloudflare-address-list.rsc"
    # - command: >-
    #     scp -o IdentitiesOnly=yes
    #       files/cloudflare-address-list.rsc
    #       {{ ansible_ssh_user }}@{{ ansible_host }}:disk1/cloudflare-address-list.rsc

    # - name: Copy Nat Rules Script
    #   ansible.builtin.command:
    #     cmd: >
    #       scp -o PasswordAuthentication=no
    #           -o PubkeyAuthentication=yes
    #           -o PubkeyAcceptedKeyTypes=+ssh-rsa
    #         files/nat-rules.rsc
    #         admin@router.lan:disk1
    #   delegate_to: localhost
    #   changed_when: true

    # - name: Setup Firewall
    #   community.routeros.api_modify:
    #     ensure_order: true
    #     handle_absent_entries: remove
    #     handle_entries_content: remove_as_much_as_possible
    #     path: ip firewall filter
    #     data:
    #       # Default firewall rules
    #       - action: accept
    #         chain: input
    #         comment: "defconf: accept established,related,untracked"
    #         connection-state: established,related,untracked
    #       - action: drop
    #         chain: input
    #         comment: "defconf: drop invalid"
    #         connection-state: invalid
    #       - action: accept
    #         chain: input
    #         comment: "defconf: accept ICMP"
    #         protocol: icmp
    #       - action: accept
    #         chain: input
    #         comment: "defconf: accept to local loopback (for CAPsMAN)"
    #         dst-address: 127.0.0.1
    #       - action: drop
    #         chain: input
    #         comment: "defconf: drop all not coming from LAN"
    #         in-interface-list: '!WAN'
    #
    #       - action: accept
    #         chain: forward
    #         comment: "defconf: accept in ipsec policy"
    #         ipsec-policy: in,ipsec
    #       - action: accept
    #         chain: forward
    #         comment: "defconf: accept out ipsec policy"
    #         ipsec-policy: out,ipsec
    #       - action: fasttrack-connection
    #         chain: forward
    #         comment: "defconf: fasttrack"
    #         connection-state: established,related
    #       - action: accept
    #         chain: forward
    #         comment: "defconf: accept established,related, untracked"
    #         connection-state: established,related,untracked
    #       - action: drop
    #         chain: forward
    #         comment: "defconf: drop invalid"
    #         connection-state: invalid
    #       - action: drop
    #         chain: forward
    #         comment: "defconf: drop all from WAN not DSTNATed"
    #         connection-nat-state: '!dstnat'
    #         connection-state: new
    #         in-interface-list: WAN
    #       # Block all non-cloudflare IPs that are forwarded in the NAT
    #       - comment: "Drop dstnat packets not from cloudflare: port 80"
    #         action: drop
    #         chain: forward
    #         connection-nat-state: dstnat
    #         dst-port: '80'
    #         protocol: tcp
    #         src-address-list: '!cloudflare'
    #         in-interface-list: WAN
    #         log: yes
    #         log-prefix: drop-no-cf
    #       - comment: "Drop dstnat packets not from cloudflare: port 443"
    #         action: drop
    #         chain: forward
    #         connection-nat-state: dstnat
    #         dst-port: '443'
    #         protocol: tcp
    #         src-address-list: '!cloudflare'
    #         in-interface-list: WAN
    #         log: yes
    #         log-prefix: drop-no-cf

    # - name: Add Nat Rules
    #   community.routeros.api_modify:
    #     ensure_order: true
    #     handle_absent_entries: remove
    #     handle_entries_content: remove_as_much_as_possible
    #     path: ip firewall nat
    #     data:
    #       # For forwarding outgoing traffic.
    #       - action: masquerade
    #         chain: srcnat
    #         comment: "defconf: masquerade"
    #         ipsec-policy: out,none
    #         out-interface-list: WAN
    #       - action: dst-nat
    #         chain: dstnat
    #         in-interface-list: WAN
    #         protocol: tcp
    #         to-addresses: 10.0.0.11
    #         to-ports: 80
    #         dst-port: 80
    #       - action: dst-nat
    #         chain: dstnat
    #         in-interface-list: WAN
    #         protocol: tcp
    #         to-addresses: 10.0.0.11
    #         to-ports: 443
    #         dst-port: 443
    #       # Round-Robbin between all nodes
    #       # - { nth: '5,1', to-addresses: 10.0.0.11, action: dst-nat, chain: dstnat, in-interface-list: WAN, protocol: tcp, to-ports: 80, dst-port: 80 }
    #       # - { nth: '5,2', to-addresses: 10.0.0.13, action: dst-nat, chain: dstnat, in-interface-list: WAN, protocol: tcp, to-ports: 80, dst-port: 80 }
    #       # - { nth: '5,3', to-addresses: 10.0.0.21, action: dst-nat, chain: dstnat, in-interface-list: WAN, protocol: tcp, to-ports: 80, dst-port: 80 }
    #       # - { nth: '5,4', to-addresses: 10.0.0.22, action: dst-nat, chain: dstnat, in-interface-list: WAN, protocol: tcp, to-ports: 80, dst-port: 80 }
    #       # - { nth: '5,5', to-addresses: 10.0.0.23, action: dst-nat, chain: dstnat, in-interface-list: WAN, protocol: tcp, to-ports: 80, dst-port: 80 }
    #       # - { nth: '5,1', to-addresses: 10.0.0.11, action: dst-nat, chain: dstnat, in-interface-list: WAN, protocol: tcp, to-ports: 443, dst-port: 443 }
    #       # - { nth: '5,2', to-addresses: 10.0.0.13, action: dst-nat, chain: dstnat, in-interface-list: WAN, protocol: tcp, to-ports: 443, dst-port: 443 }
    #       # - { nth: '5,3', to-addresses: 10.0.0.21, action: dst-nat, chain: dstnat, in-interface-list: WAN, protocol: tcp, to-ports: 443, dst-port: 443 }
    #       # - { nth: '5,4', to-addresses: 10.0.0.22, action: dst-nat, chain: dstnat, in-interface-list: WAN, protocol: tcp, to-ports: 443, dst-port: 443 }
    #       # - { nth: '5,5', to-addresses: 10.0.0.23, action: dst-nat, chain: dstnat, in-interface-list: WAN, protocol: tcp, to-ports: 443, dst-port: 443 }
    #       # Round-Robbin with Only my amd64 machines
    #       # - { nth: '2,1', to-addresses: 10.0.0.11, action: dst-nat, chain: dstnat, in-interface-list: WAN, protocol: tcp, to-ports: 80, dst-port: 80 }
    #       # - { nth: '2,2', to-addresses: 10.0.0.13, action: dst-nat, chain: dstnat, in-interface-list: WAN, protocol: tcp, to-ports: 80, dst-port: 80 }
    #       # - { nth: '2,1', to-addresses: 10.0.0.11, action: dst-nat, chain: dstnat, in-interface-list: WAN, protocol: tcp, to-ports: 443, dst-port: 443 }
    #       # - { nth: '2,2', to-addresses: 10.0.0.13, action: dst-nat, chain: dstnat, in-interface-list: WAN, protocol: tcp, to-ports: 443, dst-port: 443 }
    #       # Postgres
    #       # - action: dst-nat
    #       #   chain: dstnat
    #       #   in-interface-list: WAN
    #       #   protocol: tcp
    #       #   to-addresses: 10.0.0.13
    #       #   to-ports: 5432
    #       #   dst-port: 5432
    #   changed_when: false

    # - name: Allow Only Cloudflare Traffic
    #   community.routeros.api_find_and_modify:
    #     path: ip firewall filter
    #     find:
    #       in-interface-list: WAN
    #       dst-

    # - name: Get example - ip address print
    #   community.routeros.api:
    #     path: "ip address"
    #     cmd: print
    #   register: ipaddrd_printout
    # - name: Dump "Get example" output
    #   ansible.builtin.debug: { msg: '{{ ipaddrd_printout }}' }
