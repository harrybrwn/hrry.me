- hosts: all
  become: true
  become_method: sudo

  vars_files:
    # ansible become password in vault encrypted vars file
    - ../vars/become-password.yml
    - ../vars/cloudflare-api-credentials.yml

  vars:
    nfs_package_name: nfs-kernel-server
    nfs_service_name: nfs-kernel-server

  pre_tasks: []

  handlers:
    - name: restart docker
      systemd:
        state: restarted
        name: docker.service
    - name: reload nfs
      command: 'exportfs -ra'
    - name: docker group
      shell: |
        usermod -aG docker $USER
        reboot now
      become: true
    - name: reboot
      reboot:
        msg: "Rebooted by ansible"
        connect_timeout: 5
        reboot_timeout: 600
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: whoami

  tasks:
    - name: Install dependencies.
      apt:
        update_cache: true
        package:
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          # Install the nfs server package for all hosts because docker will not run
          # an nfs server if the nfs kernel module is not loaded onto the host.
          - "{{ nfs_package_name }}"
          - certbot
          - tmux
      when: ansible_facts['os_family'] == "Debian" and ansible_facts['pkg_mgr'] == "apt"

    - name: Add docker apt source.
      args:
        executable: /bin/bash
      shell: |
        set -eu -o pipefail
        key=/etc/apt/keyrings/docker.gpg
        list=/etc/apt/sources.list.d/docker.list
        url='https://download.docker.com/linux/{{ ansible_distribution | lower}}'
        source_line="deb [arch=$(dpkg --print-architecture) signed-by=${key}] ${url} $(lsb_release -cs) stable"
        if [ -f "${key}" -a -f "${list}" ] && grep "${source_line}" "${list}" 2>&1 > /dev/null; then
          echo ''
        else
          if [ -d /etc/apt/keyrings ]; then
            rm -f "${key}"
          else
            mkdir -p /etc/apt/keyrings
          fi
          curl -fsSL "${url}/gpg" | gpg --dearmor -o "${key}"
          chmod a+r "${key}"
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=${key}] ${url} $(lsb_release -cs) stable" | \
            tee "${list}" > /dev/null
          echo "changed"
        fi
      when: ansible_facts['os_family'] == "Debian" and ansible_facts['pkg_mgr'] == "apt"
      register: docker_apt_source
      changed_when: docker_apt_source.stdout == "changed"
    - name: Install docker.
      apt:
        update_cache: true  # update cache because we just added a repo
        package:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin
      when: ansible_facts['os_family'] == "Debian" and ansible_facts['pkg_mgr'] == "apt"
      notify: docker group
    - name: Install custom libseccomp2 version.
      apt:
        deb: http://http.us.debian.org/debian/pool/main/libs/libseccomp/libseccomp2_2.5.4-1+b1_armhf.deb
      when: |
        ansible_facts.architecture == "armv7l" and
        ansible_facts.os_family == "Debian" and
        ansible_facts.pkg_mgr == "apt"

    - name: Create NFS mount points.
      file:
        path: /mnt/nfs/hrry.dev
        mode: '0755'
        state: directory

    - name: Provision NFS Server
      block:
        - name: Start service.
          ansible.builtin.systemd:
            state: started
            name: "{{ nfs_service_name }}"
            enabled: true
          loop:
            - "{{ nfs_service_name }}"
            - rpcbind.service
            - rpcbind.socket
        - name: Create export directories.
          ansible.builtin.file:
            path: "{{ item.path }}"
            mode: '0755'
            state: directory
          loop: "{{ nfs_exports }}"
        - name: Create extra NFS directories in an exported directory.
          ansible.builtin.file:
            path: "{{ item.path }}"
            mode: '0755'
            # TODO default to an ansible_user or ansible_become_user variable
            group: "{{ item.group | default('root') }}"
            owner: "{{ item.user | default('root') }}"
            state: directory
            recurse: true
          loop: "{{ nfs_extra_dirs }}"
          when: nfs_extra_dirs is defined
          become: true
        - name: Add NFS exports file.
          ansible.builtin.template:
            src: ../templates/exports.j2
            dest: /etc/exports
            mode: '0644'
            backup: false
          notify: reload nfs
      when: nfs_server and nfs_exports is defined
    - name: Remove NFS services.
      ansible.builtin.systemd:
        state: stopped
        enabled: false
        name: "{{ item }}"
      loop:
        - nfs-kernel-server.service
        - rpcbind.service
        - rpcbind.socket
      when: nfs_server is not defined or not nfs_server

    - name: Create docker certs dirs.
      file:
        path: "{{ item.path }}"
        owner: root
        group: root
        mode: '0755'
        state: directory
      loop:
        - {path: /etc/docker/certs.d}
        - {path: '/etc/docker/certs.d/{{ container_registry }}'}
        - {path: /etc/docker/registry}
        - {path: /root/.secrets}
    - name: Install docker root ca.
      copy:
        src: ../../docker-root-ca.pem
        dest: '/etc/docker/certs.d/{{ container_registry }}/ca.crt'
        owner: root
        group: root
        mode: '0644'
        backup: false
        validate: openssl x509 -noout -in %s

    - name: Setup certbot.
      block:
        - name: Install cloudflare dns plugin for certbot.
          ansible.builtin.pip:
            name: certbot-dns-cloudflare==1.27.0
        - name: add cloudflare api key config file
          template:
            src: ../templates/harrybrwn-cloudflare.ini.j2
            dest: /root/.secrets/harrybrwn-cloudflare.ini
            owner: root
            group: root
            mode: '0644'
            backup: false
      when: certbot

    - name: Copy tmux config file.
      template:
        src: ../templates/.tmux.conf
        dest: ~/.tmux.conf
        backup: false
        mode: '0664'
      become: false
    - name: Create .vim directory
      ansible.builtin.file:
        path: "~/.vim"
        mode: '0755'
        state: directory
      become: false
    - name: Copy vimrc
      copy:
        src: ../files/.vimrc
        dest: ~/.vim/vimrc
        mode: '0644'
      become: false
