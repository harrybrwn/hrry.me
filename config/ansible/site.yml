# yaml-language-server: $schema=https://raw.githubusercontent.com/ansible/ansible-lint/main/src/ansiblelint/schemas/ansible.json#/$defs/playbook

- name: Configure Router
  ansible.builtin.import_playbook: playbooks/router.yml

- name: Basic Config
  hosts: prod
  become: true
  become_method: ansible.builtin.sudo
  vars_files:
    # ansible become password in vault encrypted vars file
    - vars/become-password.yml
    - vars/cloudflare-api-credentials.yml
    - vars/registry.yml
  vars:
    registry: '10.0.0.11:5000'
  handlers:
    - name: reboot
      ansible.builtin.reboot:
        msg: "Rebooted by ansible"
        connect_timeout: 5
        reboot_timeout: 600
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: whoami
  pre_tasks:
    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: true
  roles:
    - docker
  tasks:
    - name: Install dependencies.
      ansible.builtin.apt:
        package:
          # Install the nfs server package for all hosts because docker will not run
          # an nfs server if the nfs kernel module is not loaded onto the host.
          - certbot
          - tmux
          - nfs-common
          - open-iscsi  # for longhorn on k8s
          - util-linux  # for longhorn on k8s
          - python3-docker # for controlling docker via ansible
      when: ansible_facts['os_family'] == "Debian" and ansible_facts['pkg_mgr'] == "apt"

    - name: Create NFS mount points.
      ansible.builtin.file:
        path: /mnt/nfs/hrry.dev
        mode: '0755'
        state: directory

    - name: Set journald storage to 'persistent'
      ansible.builtin.lineinfile:
        path: /etc/systemd/journald.conf
        regexp: '^(.*)Storage=(.*)$'
        line: 'Storage=persistent'
        backrefs: yes
      register: journald_persistent
    - name: Restart systemd-journald
      ansible.builtin.systemd:
        name: systemd-journald
        state: restarted
      when: journald_persistent.changed

    - name: Set timezone to America/Los_Angeles
      community.general.timezone:
        name: America/Los_Angeles

    - name: Create docker certs dirs.
      ansible.builtin.file:
        path: "{{ item.path }}"
        owner: root
        group: root
        mode: '0755'
        state: directory
      loop:
        - {path: /etc/docker/certs.d}
        - {path: '/etc/docker/certs.d/{{ container_registry }}'}
        - {path: /etc/docker/registry}
        - {path: /root/.secrets}
    - name: Install docker root ca.
      ansible.builtin.copy:
        src: ../registry-ca.crt
        dest: '/etc/docker/certs.d/{{ container_registry }}/ca.crt'
        owner: root
        group: root
        mode: '0644'
        backup: false
        validate: openssl x509 -noout -in %s

    - name: Copy tmux config file.
      ansible.builtin.template:
        src: templates/.tmux.conf
        dest: ~/.tmux.conf
        backup: false
        mode: '0664'
      become: false
    - name: Create .vim directory
      ansible.builtin.file:
        path: "~/.vim"
        mode: '0755'
        state: directory
      become: false
    - name: Copy vimrc
      ansible.builtin.copy:
        src: files/.vimrc
        dest: ~/.vim/vimrc
        mode: '0644'
      become: false

- name: Cloudflare API Key
  hosts: laptop
  become: true
  gather_facts: false
  vars_files:
    - vars/become-password.yml
    - vars/cloudflare-api-credentials.yml
  tasks:
    - name: Install cloudflare dns plugin for certbot
      ansible.builtin.pip:
        name: certbot-dns-cloudflare==1.27.0
    - name: Add cloudflare api key config file
      ansible.builtin.template:
        src: templates/harrybrwn-cloudflare.ini.j2
        dest: /root/.secrets/harrybrwn-cloudflare.ini
        owner: root
        group: root
        mode: '0644'
        backup: false

- name: NFS Config
  hosts: lenovo
  become: true
  gather_facts: false
  vars_files:
    - vars/become-password.yml
    - vars/postgres.yml
  vars:
    nfs_package_name: nfs-kernel-server
    nfs_service_name: nfs-kernel-server
    nfs_exports:
      # Manual data
      - path: /exports/nfs/hrry.dev
        host: '*'
        options: [rw, no_root_squash, no_subtree_check, insecure]
      # For automated nfs provisioner
      - path: /exports/nfs/k8s
        host: '*'
        options: [rw, no_root_squash, no_subtree_check, insecure]
      - path: /mnt/big-boi-0
        host: '*'
        options:
          - rw
          - no_root_squash
          - no_subtree_check
          - insecure
          - crossmnt # allows you to mount on another drive mount point
    nfs_extra_dirs:
      - path: /exports/nfs/hrry.dev/certs
      - path: /exports/nfs/hrry.dev/storage/s3
      - path: /exports/nfs/hrry.dev/storage/grafana
      - path: /exports/nfs/hrry.dev/storage/prometheus
        group: nogroup
        user: nobody
      - path: /exports/nfs/hrry.dev/storage/loki
      - path: /exports/nfs/hrry.dev/storage/filestash
      - path: /exports/nfs/hrry.dev/storage/bluesky-pds
  pre_tasks:
    - name: Install NFS Server
      ansible.builtin.apt:
        package:
          - nfs-kernel-server
          - samba
  roles:
    - nfs

  module_defaults:
    community.postgresql.postgresql_user: &pg_auth
      host: "{{ ansible_host }}"
      login_password: '{{ postgres_password }}'
    community.postgresql.postgresql_privs: *pg_auth
    community.postgresql.postgresql_db: *pg_auth
  tasks:
    - name: Create backups storage location.
      ansible.builtin.file:
        path: "/opt/hrry.dev/backups"
        mode: '0755'
        state: directory
    - name: Install backups cron job.
      ansible.builtin.cron:
        name: 'data backups'
        job: rsync -avAR --delete /exports/nfs /opt/hrry.dev/backups/$(date +\%F)/
        weekday: '0,4' # sunday, thursday
        minute: '0'
        hour: '0'

# - name: Configure PostgreSQL
#   ansible.builtin.import_playbook: playbooks/postgres.yml

- name: K3S
  ansible.builtin.import_playbook: playbooks/k3s.yml
