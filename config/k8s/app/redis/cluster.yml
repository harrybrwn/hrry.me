apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-cluster-env
data:
  REDIS_PORT: '6379'
  REDIS_CLUSTER_ENABLED: 'yes'
  REDIS_DNS_FORMAT: "%s.redis"
  REDIS_CLUSTER_HOSTS: redis-0,redis-1,redis-2,redis-3,redis-4,redis-5

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
spec:
  selector:
    matchLabels:
      app: redis
  serviceName: redis
  replicas: 6
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: 10.0.0.11:5000/harrybrwn/redis:latest
        imagePullPolicy: IfNotPresent
        command: ["cluster-entrypoint.sh"]
        ports:
        - name: redis
          containerPort: 6379
        envFrom:
        - configMapRef: { name: redis-cluster-env }
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secrets
              key: password
        volumeMounts:
        - name: data
          mountPath: /data
      volumes:
      - name: redis-config
        emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
        - ReadWriteOnce
        # - ReadWriteMany
      storageClassName: local-path # k3s
      #storageClassName: standard # minikube
      #storageClassName: nfs-storage
      resources:
        requests:
          storage: 10Mi

---
apiVersion: batch/v1
kind: Job
metadata:
  name: create-redis-cluster
spec:
  ttlSecondsAfterFinished: 100
  template:
    spec:
      containers:
      - name: start-redis-cluster
        image: 10.0.0.11:5000/harrybrwn/redis:latest
        imagePullPolicy: IfNotPresent
        command: ["create-cluster.sh"]
        envFrom:
        - configMapRef: { name: redis-cluster-env }
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secrets
              key: password
      restartPolicy: Never
