services:
  provision:
    image: ${REGISTRY}/harrybrwn/provision:${VERSION:-latest}
    build:
      context: .
      dockerfile: Dockerfile
      target: provision
    working_dir: /opt/harrybrwn

  ansible:
    image: ${REGISTRY}/harrybrwn/ansible:${VERSION:-latest}
    build:
      context: .
      dockerfile: config/ansible/Dockerfile
      target: ansible
      x-bake:
        platforms:
          - linux/amd64
    volumes:
      - ${SSH_AUTH_SOCK}:/ssh.sock
      # - ./config:/home/ansible/config
      - .:/home/ansible/hrry.me
      # So I can copy the kubeconfig after setting up a new cluster
      - ${HOME}/.kube:/home/ansible/.kube
      - ${HOME}/.aws:/home/ansible/.aws
      - ${HOME}/.ssh/known_hosts:/home/ansible/.ssh/known_hosts:ro
      - /var/run/docker.sock:/var/run/docker.sock
    working_dir: /home/ansible/hrry.me
    # network_mode: host # needs to be able to communicate with link-local addresses
    environment:
      - SSH_AUTH_SOCK=/ssh.sock
      - ANSIBLE_CONFIG=/home/ansible/hrry.me/config/ansible/ansible.cfg
      - ANSIBLE_HOST_KEY_CHECKING=False
      - ANSIBLE_VAULT_PASSWORD_FILE=~/hrry.me/config/ansible/vault-password.txt

  curl:
    image: 10.0.0.11:5000/harrybrwn/curl:latest
    build:
      context: .
      dockerfile: config/docker/Dockerfile.curl
      args:
        - ALPINE_VERSION=3.16

  debug:
    image: ${REGISTRY}/harrybrwn/debug:${VERSION:-latest}
    build:
      context: .
      dockerfile: Dockerfile
      target: debug
      x-bake:
        platforms:
          - linux/amd64

  oidc-tester:
    # https://medium.com/application-security/openid-connect-tester-for-developers-63427324faea
    image: registry.gitlab.com/guenoledc-perso/idp-oidc-tester:latest
    ports:
      - 8888:8888
    network_mode: host
    environment:
      - PORT=8888
      - EXTERNAL_OWN_URL=http://localhost:8888
      - REDIS_URL=redis://:testbed01@redis:6379
