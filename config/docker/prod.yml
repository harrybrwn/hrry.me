version: "3.8"

services:
  db:
    deploy:
      replicas: 1
      placement:
        max_replicas_per_node: 1
        constraints:
          - "node.role==manager"
      restart_policy:
        condition: on-failure
        max_attempts: 3
        delay: 2s
    env_file:
      - config/env/prod/db.env
      - config/env/swarm_data.env

  redis:
    deploy:
      replicas: 1
      placement:
        constraints:
          - "node.role==worker"
          - "node.labels.logs==true"
      restart_policy:
        condition: on-failure
        max_attempts: 3
        delay: 2s
    env_file:
      - config/env/swarm_data.env
    networks:
      - service-mesh

  nginx:
    deploy:
      endpoint_mode: vip
      placement:
        constraints:
          - "node.role==manager"
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 120s
    volumes:
      # harrybrwn.com
      - /etc/letsencrypt/live/harrybrwn.com/fullchain.pem:/etc/harrybrwn/certs/harrybrwn.com.crt:ro
      - /etc/letsencrypt/live/harrybrwn.com/privkey.pem:/etc/harrybrwn/certs/harrybrwn.com.key:ro
      # hryb.dev
      - /etc/letsencrypt/live/hryb.dev/fullchain.pem:/etc/harrybrwn/certs/hryb.dev.crt:ro
      - /etc/letsencrypt/live/hryb.dev/privkey.pem:/etc/harrybrwn/certs/hryb.dev.key:ro
      # hrry.me
      - /etc/letsencrypt/live/hrry.me/fullchain.pem:/etc/harrybrwn/certs/hrry.me.crt:ro
      - /etc/letsencrypt/live/hrry.me/privkey.pem:/etc/harrybrwn/certs/hrry.me.key:ro
      # hrry.dev
      - /etc/letsencrypt/live/hrry.dev/fullchain.pem:/etc/harrybrwn/certs/hrry.dev.crt:ro
      - /etc/letsencrypt/live/hrry.dev/privkey.pem:/etc/harrybrwn/certs/hrry.dev.key:ro
    environment:
      - REGISTRY_URL=https://registry.hrry.dev
    env_file:
      - config/env/swarm_data.env
    networks:
      - service-mesh

  api:
    hostname: '{{.Task.Name}}-{{.Node.Hostname}}'
    deploy:
      replicas: 3
      placement:
        max_replicas_per_node: 2
        constraints:
          - "node.role==worker"
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
      update_config:
        parallelism: 1
        delay: 2s
        order: stop-first
    environment:
      - ENV=production
      - LOG_FORMAT=json
    env_file:
      - config/env/sendgrid.env
      - config/env/prod/db.env
      - config/env/prod/jwt.env
      - config/env/swarm_data.env
      # - config/env/api.prod.env

  hooks:
    env_file:
      - config/env/sendgrid.env
      - config/env/prod/db.env
      - config/env/swarm_data.env
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
      placement:
        constraints:
          - "node.role==worker"
    environment:
      - ENV=production
      - LOG_FORMAT=json

  backups:
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        max_attempts: 3
      placement:
        constraints:
          - "node.role==worker"
    env_file:
      - config/env/prod/db-backup.env
      - config/env/swarm_data.env
    environment:
      - ENV=production
      - LOG_FORMAT=json

  geoip:
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        max_attempts: 3
      placement:
        constraints:
          - "node.role==worker"
    env_file:
      - config/env/swarm_data.env
    environment:
      - ENV=production
      - LOG_FORMAT=json

  legacy-site:
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        max_attempts: 3
      placement:
        constraints:
          - "node.role==worker"
    env_file:
      - config/env/prod/jwt.env

  fluentbit:
    # hostname: '{{ .Task.Name }}-{{ .Node.Hostname }}'
    hostname: 'fluentbit-{{ .Node.Hostname }}'
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 5
    env_file:
      - config/env/swarm_data.env
    environment:
      - ENV=production

  loki:
    deploy:
      replicas: 1
      placement:
        constraints: [node.labels.logs == true]
      restart_policy:
        condition: on-failure
        max_attempts: 5
        delay: 10s
    env_file:
      - config/env/prod/db.env
      - config/env/prod/loki.env
      - config/env/swarm_data.env

  grafana:
    deploy:
      placement:
        constraints: [node.labels.logs == true]
      replicas: 1
      restart_policy:
        condition: on-failure
        max_attempts: 5
        delay: 10s
    environment:
      - GF_SERVER_ROOT_URL=https://grafana.hrry.dev
    env_file:
      - config/env/prod/db.env
      - config/env/swarm_data.env

  prometheus:
    deploy:
      replicas: 1
      placement:
        constraints: [node.labels.logs == true]
      restart_policy:
        condition: on-failure
        max_attempts: 5
        delay: 10s
    env_file:
      - config/env/swarm_data.env

  registry:
    volumes:
      - registry:/var/lib/registry
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        max_attempts: 6
      placement:
        max_replicas_per_node: 2
    env_file:
      - config/env/prod/registry.env
      - config/env/prod/minio.env
      - config/env/swarm_data.env

  s3:
    deploy:
      replicas: 1
      placement:
        max_replicas_per_node: 1
        constraints: [node.labels.s3 == true]
      restart_policy:
        condition: on-failure
        max_attempts: 3
    env_file:
      - config/env/prod/minio.env
      - config/env/swarm_data.env
    environment:
      - MINIO_BROWSER_REDIRECT_URL=https://s3-console.hrry.dev
    networks:
      - service-mesh

  filestash:
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        max_attempts: 8
    env_file:
      - config/env/swarm_data.env
      #- config/env/prod/filestash.env

volumes:
  registry:
    external: true
  filestash:
    driver_opts:
      type: nfs4
      o: addr=10.0.0.13,rw,soft,intr
      device: ":/exports/nfs/hrry.dev/storage/filestash"
  s3:
    driver_opts: { type: none, o: bind, device: /exports/nfs/hrry.dev/storage/s3 }
  grafana:
    driver_opts: { type: none, o: bind, device: /exports/nfs/hrry.dev/storage/grafana }
  prometheus:
    driver_opts: { type: none, o: bind, device: /exports/nfs/hrry.dev/storage/prometheus }
  loki:
    driver_opts: { type: none, o: bind, device: /exports/nfs/hrry.dev/storage/loki }

networks:
  service-mesh:
    external: true
    name: service-mesh
